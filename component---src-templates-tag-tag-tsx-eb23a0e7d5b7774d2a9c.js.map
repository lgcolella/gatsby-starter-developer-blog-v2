{"version":3,"sources":["webpack:///./src/templates/tag/tag.tsx"],"names":["style","require","pageQuery","TagPage","data","tag","pageContext","tagName","Lang","tags","name","Utils","capitalize","tagImage","edge","allFile","edges","find","node","childImageSharp","fluid","title","description","templates","pageTitle","path","resolveUrl","Config","pages","keywords","className","heading","cover","loading","posts","allMarkdownRemark"],"mappings":"mQAaMA,EAAQC,EAAQ,KA0FTC,EAAY,YA2CVC,UAnIC,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,KACXC,EAD0C,EAAzBC,YACCD,IAClBE,EAAUC,IAAKC,KAAKJ,GAAKK,MAAQC,IAAMC,WAAWP,GAClDQ,EAAY,WAChB,IAAIC,EAAOV,EAAKW,QAAQC,MAAMC,MAAK,SAAAH,GAAI,OAAIA,EAAKI,KAAKR,OAASL,KAC9D,GAAIS,EACF,OAAOA,EAAKI,KAAKC,gBAAgBC,MAEjC,KAAM,iCAAmCf,EAL3B,GASlB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEgB,MAAOd,EACPe,YAAgBd,IAAKe,UAAUlB,IAAImB,UAAxB,IAAqCjB,EAChDkB,KAAMd,IAAMe,WAAWC,IAAOC,MAAMvB,IAAKA,GACzCwB,SAAU,CAACtB,KAEb,yBAAKuB,UAAW9B,EAAM+B,SACpB,6BACE,4BAAKxB,IAEP,yBAAKuB,UAAW9B,EAAMgC,OACpB,kBAAC,IAAD,CAAKZ,MAAOP,EAAUoB,QAAS,YAGnC,kBAAC,IAAD,CAAUC,MAAO9B,EAAK+B,kBAAkBnB","file":"component---src-templates-tag-tag-tsx-eb23a0e7d5b7774d2a9c.js","sourcesContent":["/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport { ChildImageSharpFluid, AvailableTag } from '../../types'\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport PostList from '../../components/post-list'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\nimport Lang from '../../i18n/default'\r\nconst style = require('./tag.module.less')\r\n\r\nconst TagPage = ({ data, pageContext }: Props) => {\r\n  const tag = pageContext.tag\r\n  const tagName = Lang.tags[tag].name || Utils.capitalize(tag)\r\n  const tagImage = (() => {\r\n    let edge = data.allFile.edges.find(edge => edge.node.name === tag)\r\n    if (edge) {\r\n      return edge.node.childImageSharp.fluid\r\n    } else {\r\n      throw 'Not image file found for tag: ' + tag\r\n    }\r\n  })()\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={tagName}\r\n        description={`${Lang.templates.tag.pageTitle} ${tagName}`}\r\n        path={Utils.resolveUrl(Config.pages.tag, tag)}\r\n        keywords={[tagName]}\r\n      />\r\n      <div className={style.heading}>\r\n        <div>\r\n          <h1>{tagName}</h1>\r\n        </div>\r\n        <div className={style.cover}>\r\n          <Img fluid={tagImage} loading={'eager'} />\r\n        </div>\r\n      </div>\r\n      <PostList posts={data.allMarkdownRemark.edges} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTagPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        })\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport interface Props {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: {\r\n          frontmatter: {\r\n            title: string\r\n            date: string\r\n            path: string\r\n            tags: AvailableTag[]\r\n            excerpt: string\r\n            cover: {\r\n              childImageSharp: ChildImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }>\r\n    }\r\n    allFile: {\r\n      edges: Array<{\r\n        node: {\r\n          name: AvailableTag\r\n          childImageSharp: ChildImageSharpFluid\r\n        }\r\n      }>\r\n    }\r\n  }\r\n  pageContext: {\r\n    tag: AvailableTag\r\n  }\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String!) {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] } }\r\n        fileAbsolutePath: { regex: \"/index.md$/\" }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"YYYY-MM-DD\")\r\n            path\r\n            tags\r\n            excerpt\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600) {\r\n                  ...GatsbyImageSharpFluid_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxHeight: 200) {\r\n              ...GatsbyImageSharpFluid_noBase64\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default TagPage\r\n"],"sourceRoot":""}