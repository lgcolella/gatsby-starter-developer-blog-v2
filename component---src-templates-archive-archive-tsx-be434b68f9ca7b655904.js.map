{"version":3,"sources":["webpack:///./src/templates/archive/archive.tsx","webpack:///./src/components/button/button.tsx","webpack:///./src/components/button/index.ts","webpack:///./src/components/archive-pagination/archive-pagination.tsx"],"names":["query","Archive","data","pageContext","archivePage","prevPage","undefined","nextPage","lastArchivePage","title","Lang","templates","archive","pageTitle","description","path","Config","pages","posts","allMarkdownRemark","edges","style","require","Button","children","to","buttonStyle","className","button","defaultProps","ArchivePagination","container","Utils","resolveUrl","toString","buttonLeft","components","archivePagination","newerPostsButton","buttonRight","olderPostsButton"],"mappings":"iLAAA,sCAaA,IAyDaA,EAAQ,YA+BNC,UAxFC,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,YACfC,EAAiCD,EAAjCC,YACFC,EAAWD,EAAc,EAAIA,EAAc,OAAIE,EAC/CC,EAAWH,EAFwBD,EAApBK,gBAE4BJ,EAAc,OAAIE,EAEnE,OACE,kBAAC,IAAD,CAAQG,MAAOC,IAAKC,UAAUC,QAAQH,OACpC,kBAAC,IAAD,CACEA,MAAUC,IAAKC,UAAUC,QAAQC,UAA5B,IAAyCT,EAC9CU,YAAaJ,IAAKC,UAAUC,QAAQE,YACpCC,KAAMC,IAAOC,MAAML,UAErB,kBAAC,IAAD,CAAUM,MAAOhB,EAAKiB,kBAAkBC,QACxC,kBAAC,IAAD,CAAmBf,SAAUA,EAAUE,SAAUA,O,6DCrBjDc,EAAQC,EAAQ,KAEhBC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,GAAIC,EAAjB,EAAiBA,YAAjB,OACb,kBAAC,OAAD,CAAMD,GAAIA,EAAIE,UAAcN,EAAMO,OAAX,IAAqBF,GACzCF,IAULD,EAAOM,aAAe,CACpBH,YAAa,IASAH,QC7Bf,mC,0HCSMF,EAAQC,EAAQ,KAoCPQ,IAlCW,SAAC,GAAD,IACxBzB,EADwB,EACxBA,SACAE,EAFwB,EAExBA,SAFwB,OAOxB,yBAAKoB,UAAWN,EAAMU,WACnB1B,EACC,kBAAC,IAAD,CACEoB,GAAIO,IAAMC,WAAWjB,IAAOC,MAAML,QAASP,EAAS6B,YACpDR,YAAaL,EAAMc,YAEnB,kBAAC,IAAD,MACA,8BAAOzB,IAAK0B,WAAWC,kBAAkBC,mBAEzC,KACH/B,EACC,kBAAC,IAAD,CACEkB,GAAIO,IAAMC,WAAWjB,IAAOC,MAAML,QAASL,EAAS2B,YACpDR,YAAaL,EAAMkB,aAEnB,8BAAO7B,IAAK0B,WAAWC,kBAAkBG,kBACzC,kBAAC,IAAD,OAEA","file":"component---src-templates-archive-archive-tsx-be434b68f9ca7b655904.js","sourcesContent":["/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n/* App imports */\r\nimport { AvailableTag, ChildImageSharpFluid } from '../../types'\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport PostList from '../../components/post-list'\r\nimport ArchivePagination from '../../components/archive-pagination'\r\nimport Config from '../../../config'\r\nimport Lang from '../../i18n/default'\r\n\r\nconst Archive = ({ data, pageContext }: Props) => {\r\n  const { archivePage, lastArchivePage } = pageContext\r\n  const prevPage = archivePage > 1 ? archivePage - 1 : undefined\r\n  const nextPage = archivePage < lastArchivePage ? archivePage + 1 : undefined\r\n\r\n  return (\r\n    <Layout title={Lang.templates.archive.title}>\r\n      <SEO\r\n        title={`${Lang.templates.archive.pageTitle} ${archivePage}`}\r\n        description={Lang.templates.archive.description}\r\n        path={Config.pages.archive}\r\n      />\r\n      <PostList posts={data.allMarkdownRemark.edges} />\r\n      <ArchivePagination prevPage={prevPage} nextPage={nextPage} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nArchive.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    postIds: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    archivePage: PropTypes.number.isRequired,\r\n    lastArchivePage: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport interface Props {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: {\r\n          frontmatter: {\r\n            title: string\r\n            path: string\r\n            tags: AvailableTag[]\r\n            date: string\r\n            excerpt: string\r\n            cover: {\r\n              childImageSharp: ChildImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }>\r\n    }\r\n  }\r\n  pageContext: {\r\n    postIds: String[]\r\n    archivePage: number\r\n    lastArchivePage: number\r\n  }\r\n}\r\n\r\nexport const query = graphql`\r\n  query($postIds: [String!]) {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        id: { in: $postIds }\r\n        fileAbsolutePath: { regex: \"/index.md$/\" }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            path\r\n            tags\r\n            date(formatString: \"YYYY-MM-DD\")\r\n            excerpt\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600) {\r\n                  ...GatsbyImageSharpFluid_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Archive\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n/* App imports */\r\nconst style = require('./button.module.less')\r\n\r\nconst Button = ({ children, to, buttonStyle }: Props) => (\r\n  <Link to={to} className={`${style.button} ${buttonStyle}`}>\r\n    {children}\r\n  </Link>\r\n)\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  to: PropTypes.string.isRequired,\r\n  buttonStyle: PropTypes.string,\r\n}\r\n\r\nButton.defaultProps = {\r\n  buttonStyle: '',\r\n}\r\n\r\ninterface Props {\r\n  children: React.ReactNode\r\n  to: string\r\n  buttonStyle?: string\r\n}\r\n\r\nexport default Button\r\n","export { default } from './button'\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa'\r\n/* App imports */\r\nimport Button from '../../components/button'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\nimport Lang from '../../i18n/default'\r\nconst style = require('./archive-pagination.module.less')\r\n\r\nconst ArchivePagination = ({\r\n  prevPage,\r\n  nextPage,\r\n}: {\r\n  prevPage?: number\r\n  nextPage?: number\r\n}) => (\r\n  <div className={style.container}>\r\n    {prevPage ? (\r\n      <Button\r\n        to={Utils.resolveUrl(Config.pages.archive, prevPage.toString())}\r\n        buttonStyle={style.buttonLeft}\r\n      >\r\n        <FaArrowLeft />\r\n        <span>{Lang.components.archivePagination.newerPostsButton}</span>\r\n      </Button>\r\n    ) : null}\r\n    {nextPage ? (\r\n      <Button\r\n        to={Utils.resolveUrl(Config.pages.archive, nextPage.toString())}\r\n        buttonStyle={style.buttonRight}\r\n      >\r\n        <span>{Lang.components.archivePagination.olderPostsButton}</span>\r\n        <FaArrowRight />\r\n      </Button>\r\n    ) : null}\r\n  </div>\r\n)\r\n\r\nArchivePagination.propTypes = {\r\n  prevPage: PropTypes.number,\r\n  nextPage: PropTypes.number,\r\n}\r\n\r\nexport default ArchivePagination\r\n"],"sourceRoot":""}