{"version":3,"sources":["webpack:///./src/pages/tag/index.tsx"],"names":["style","require","query","Tag","data","rawTags","allMarkdownRemark","edges","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","tag","index","indexOf","sort","tagPage","Config","pages","tagImages","allFile","prevResult","currEdge","Object","assign","name","childImageSharp","fluid","title","Lang","description","path","to","Utils","resolveUrl","className","card","key","cover","loading","capitalize","sTag","length","postsLabel"],"mappings":"kQAYMA,EAAQC,EAAQ,KAsGTC,EAAQ,aA0BNC,UA9HH,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KACPC,EAAUD,EAAKE,kBAAkBC,MACpCC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,QAClCC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,OAAOD,MAChCH,EAAOP,EACVY,QAAO,SAACC,EAAKC,GAAN,OAAgBA,IAAUd,EAAQe,QAAQF,MACjDG,OACGC,EAAUC,IAAOC,MAAMN,IACvBO,EAAYrB,EAAKsB,QAAQnB,MAAMM,QACnC,SAACc,EAAYC,GAAa,MACxB,OAAOC,OAAOC,OAAO,GAAIH,IAAlB,MACJC,EAASlB,KAAKqB,MAAOH,EAASlB,KAAKsB,gBAAgBC,MAD/C,MAIT,IAGF,OACE,kBAAC,IAAD,CAAQC,MAAOC,IAAKX,MAAMN,IAAIgB,OAC5B,kBAAC,IAAD,CACEA,MAAOC,IAAKX,MAAMN,IAAIgB,MACtBE,YAAaD,IAAKX,MAAMN,IAAIkB,YAC5BC,KAAMf,IAER,6BACGV,EAAKJ,KAAI,SAAAU,GAAG,OACX,kBAAC,OAAD,CACEoB,GAAIC,IAAMC,WAAWlB,EAASJ,GAC9BuB,UAAWzC,EAAM0C,KACjBC,IAAKzB,GAEL,yBAAKuB,UAAWzC,EAAM4C,OACpB,kBAAC,IAAD,CAAOX,MAAOR,EAAUP,GAAM2B,QAAS,WAEzC,6BACE,4BAAKV,IAAKvB,KAAKM,GAAKa,MAAQQ,IAAMO,WAAW5B,IAC7C,2BAAIiB,IAAKvB,KAAKM,GAAKkB,aACnB,+BACG/B,EAAQY,QAAO,SAAA8B,GAAI,OAAIA,IAAS7B,KAAK8B,OACpC,IACAb,IAAKX,MAAMN,IAAI+B","file":"component---src-pages-tag-index-tsx-410f0b7f7cee9935e28b.js","sourcesContent":["/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Image from 'gatsby-image'\r\n/* App imports */\r\nimport { ChildImageSharpFluid, AvailableTag } from '../../types'\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\nimport Lang from '../../i18n/default'\r\nconst style = require('./tag.module.less')\r\n\r\nconst Tag = ({ data }: Props) => {\r\n  const rawTags = data.allMarkdownRemark.edges\r\n    .map(edge => edge.node.frontmatter.tags)\r\n    .reduce((prev, curr) => prev.concat(curr))\r\n  const tags = rawTags\r\n    .filter((tag, index) => index === rawTags.indexOf(tag))\r\n    .sort() // Remove duplicates and sort values\r\n  const tagPage = Config.pages.tag\r\n  const tagImages = data.allFile.edges.reduce(\r\n    (prevResult, currEdge) => {\r\n      return Object.assign({}, prevResult, {\r\n        [currEdge.node.name]: currEdge.node.childImageSharp.fluid,\r\n      })\r\n    },\r\n    {} as any\r\n  )\r\n\r\n  return (\r\n    <Layout title={Lang.pages.tag.title}>\r\n      <SEO\r\n        title={Lang.pages.tag.title}\r\n        description={Lang.pages.tag.description}\r\n        path={tagPage}\r\n      />\r\n      <div>\r\n        {tags.map(tag => (\r\n          <Link\r\n            to={Utils.resolveUrl(tagPage, tag)}\r\n            className={style.card}\r\n            key={tag}\r\n          >\r\n            <div className={style.cover}>\r\n              <Image fluid={tagImages[tag]} loading={'eager'} />\r\n            </div>\r\n            <div>\r\n              <h3>{Lang.tags[tag].name || Utils.capitalize(tag)}</h3>\r\n              <p>{Lang.tags[tag].description}</p>\r\n              <label>\r\n                {rawTags.filter(sTag => sTag === tag).length +\r\n                  ' ' +\r\n                  Lang.pages.tag.postsLabel}\r\n              </label>\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTag.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired\r\n      ).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n}\r\n\r\ninterface Props {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: {\r\n          frontmatter: {\r\n            tags: AvailableTag[]\r\n          }\r\n        }\r\n      }>\r\n    }\r\n    allFile: {\r\n      edges: Array<{\r\n        node: {\r\n          name: AvailableTag\r\n          childImageSharp: ChildImageSharpFluid\r\n        }\r\n      }>\r\n    }\r\n  }\r\n}\r\n\r\nexport const query = graphql`\r\n  {\r\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid_noBase64\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Tag\r\n"],"sourceRoot":""}